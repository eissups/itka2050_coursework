## Harjoitustyöraportti

Palauttajat : Elisa Autonen ja Matti Takasalo
Pisteitä yhteensä: 18
Git: https://github.com/eissups/itka2050_coursework.git

## Ongelma 1
Tyyppi:   Polkuinjektio
Sijainti: delete_file()
Kuvaus:

Aliohjelmassa delete_file ei tarkasteta käyttäjän syöttämää polkua
millään tavalla. Tämä mahdollistaa sen, että käyttäjä tuhoaa minkä
tahansa tiedoston, esimerkiksi toisen käyttäjän tiedoston tai vaikkapa
jonkin järjestelmätiedoston.

### Esimerkkihyökkäys: 

1) Kirjaudu sisään käyttäjänä "sam".
2) Tee pyyntö /delete_file?file=../sue/tiedosto.txt
3) Tulos: Suen tiedosto tuhotaan

### Korjaus:

Commit: <Ongelma 1 korjattu>

Korjasin tämän lisäämällä tarkistuksen, onko polussa jonkun muun käyttäjän
kuin kirjautuneena olevan käyttäjänimi.

Korjaus toimii koska jos löydetään jonkun muun käyttäjän nimi, ei poisteta mitään vaan 
palataan vain takaisin omiin tiedostoihin.

Korjaus estää uuden polkuinjektion syntymisen, sillä uutta reittiä luotaessa...

### Pisteet(2pt)

1pt vian löytämisestä
1pt vian korjaamisesta
0pt vikatyypin eliminoimisesta


## Ongelma 2 

Tyyppi:   Shellinjektio
Sijainti: checkerLoop(queue)
Kuvaus: 

Aliohjelmassa checkerLoop käyttäjän antama tiedostonnimi menee komentotulkkiin ja näin hyökkääjä pääsee halutessaan antamaan omia komentojaan.

### Esimerkkihyökkäys: 

1) Kirjaudu sisään vaikka käyttäjänä "sam".
2) Lisää ja upload esimerkiksi tiedosto "jee.png;ls"
3) Tulos: komentotulkki ottaa kohdan ls komentona eikä kuvan nimenä ja näytetään sisältö

### Korjaus:

Commit: <ongelma2, shellinjektio, korjattu>

Korjasin tämän poistamalla "Shell=true", kohdan ja laittamalla komennot listana, enkä yhtenä merkkijonona. 

Korjaus toimii koska enää ei mennä komentotulkin kautta, ekä käytetä merkkijonoja johon vain liimattaisiin asioita. 
Tiedostonnimeä ei siis voida ottaa enää komentoina vaan se on vain yksi tiedostonnimi.

Korjaus estää uuden polkuinjektion syntymisen, sillä uutta reittiä luotaessa...

### Pisteet(2pt)

1pt vian löytämisestä
1pt vian korjaamisesta
0pt vikatyypin eliminoimisesta


## Ongelma 3 

Tyyppi: xss_injektio
Sijainti: checkerLoop
Kuvaus: Voidaan ladata sivulle html yms. tiedostoja(tiedostonimen mukana)

Aliohjelmassa checkerLoop saadaan lisättyä tiedostoja, joilla on vaarallinen nimi
ja voidaan esimerkiksi rikkoa sivun käyttöliittymän tai lähetellä mitä vain muita pyyntöjä.

### Esimerkkihyökkäys: 

1) Kirjaudu sisään jonakin käyttäjänä.
2) Riittää, että ihan vain lisää ja uploadaa tyhjän tiedoston, jonka nimeksi on laitettu <h1>HAKKEROINTI</h1><script>alert()</script>.html
3) Tulos: Ei voida enää ladata uusia tiedostoja tai jakaa tiedostoja vaan niiden tilalla lukee HAKKEROINTI<:h1>

### Korjaus:

Commit: <ongelma3 korjattu>

Korjasin tämän niin, että bad_file_logiin lisäyskäskyn tiedostonnimi muutetaan vaarattomaksi secure_filename:llä. 

Korjaus toimii koska securefilename suodattaa vaaralliset merkit pois.

Korjaus estää uuden polkuinjektion syntymisen, sillä uutta reittiä luotaessa...

### Pisteet(2pt)

1pt vian löytämisestä
1pt vian korjaamisesta
0pt vikatyypin eliminoimisesta


## Ongelma 4 

Tyyppi:   polkuinjektio
Sijainti: login()
Kuvaus: Voidaan kirjautua sisään millä nimellä tahansa, sekä urkkia tietoa.

Aliohjelma tarkistaa users -taulukosta käyttänimet, mutta päästää läpi kaikki sellaiset käyttäjänimet, joita ei ole listattu taulukkoon.

### Esimerkkihyökkäys: 

1) Kirjaudu sisään jonakin käyttäjänä.
2) Lisää kuvia palveluun
3) Log out käyttäjällä
4) Hyökkääjä päättää syöttää webselaimen url kenttään: http://localhost:5000/login?user=ihanmikavaan
5) Tulos: Hyökkääjä pääsee käsiksi jaettuihin tiedostoihin.

### Korjaus:

Commit: <ongelma4 ja 5 korjattu>

Korjattu lisäämällä muuttamalla ehto muodosta 'if username:' -> 'if username in users:'. 
Eli aikaisemmin 'if username' palautti aina truen. 

Korjaus toimii, koska nyt tarkistaa onko se username oikeasti siellä 'users' -taulukossa. 
MUTTA tästä syntyy uusi ongelma, joka pitää korjata erikseen, eli nyt voidaan käydä läpi käyttäjänimiä, joilla on käyttäjä palvelussa. 
Jos löytyy oikea käyttäjänimi, niin sivusto viestii, että 'login failed' eli ks. ongelma 6.

### Pisteet(2pt)

1pt vian löytämisestä
0.5pt vian korjaamisesta (tehtävä 5 loput)
0pt vikatyypin eliminoimisesta


## Ongelma 5 

Tyyppi:   polkuinjektio
Sijainti: login()
Kuvaus: Voidaan kirjautua sisään millä nimellä tahansa, sekä syöttää kuvia palveluun.

Aliohjelma tarkistaa users -taulukosta käyttänimet, mutta päästää läpi kaikki sellaiset käyttäjänimet, joita ei ole listattu taulukkoon.

### Esimerkkihyökkäys: 

1) Hyökkääjä päättää syöttää webselaimen url kenttään: http://localhost:5000/login?user=ihanmikavaan.
2) Hyökkääjä alkaa latailemaan tietostoja palveluun.
2) Tulos: Hyökkääjä pääsee lataamaan palveluun kuvia, ja voi pahimmassa tapauksessa tukkia koko roskan.

### Korjaus:

Commit: <ongelma 4 ja 5 korjattu>

Ongelman 4 korjaus korjaa tämänkin ellei jäänyt jotain reikää johonkin. 
Eli: "Korjattu lisäämällä muuttamalla ehto muodosta 'if username:' -> 'if username in users:'. 
Eli aikaisemmin 'if username' palautti aina truen.
Nyt se tarkistaa onko se username oikeasti siellä 'users' -taulukossa. 
MUTTA tästä syntyy uusi ongelma, joka pitää korjata erikseen, eli nyt voidaan käydä läpi käyttäjänimiä, joilla on käyttäjä palvelussa. 
Jos löytyy oikea käyttäjänimi, niin sivusto viestii, että 'login failed' eli ks. ongelma 6."

### Pisteet(2pt)

1pt vian löytämisestä
0.5pt vian korjaamisesta (tehtävänä 4 loput)
0pt vikatyypin eliminoimisesta


## Ongelma 6 

Tyyppi:   käyttäjänimet vaarassa löytyä
Sijainti: login()
Kuvaus: Hyökkääjä voi arvailla ohjelmassa olevat käyttäjänimet

Aliohjelma tarkistaa users -taulukosta käyttänimet, jos käyttäjä löytyy listasta, mutta salasana on väärin tulostetaan webselaimen ikkunaan: "Login failed!". Jos käyttäjänimeä ei ole users-taulukossa, niin tulostetaan webselaimeen sama login ruutu kuin alussa on.

### Esimerkkihyökkäys: 

1) Hyökkääjä kokeilee urliin käyttäjänimiä esim: http://localhost:5000/login?user=lion
2) Vastauksena tulee html sivu, jossa kerrotaan, että login failed
3) Hyökkääjä arvaa, että tälläinen käyttjänimi on järjestelmässä!
4) Tulos: Hyökkääjällä on tiedossa karkeasti sanottuna puolet tunnus:salasana -parista.

### Korjaus:

Commit: <korjattu ongelma 6>

Kopioidaan toisen else -lauseen return -lauseen sisältö suoraan myös toiseen/ensimmäiseen else -lauseeseen. Eli: <h1>Login failed!</h1> -> <h1>System log in</h1> jne.

Korjaus toimii, koska jos nyt yrittää kirjautua ilman salasanaa, sivusto ei viesti 'login failed' -viestiä. Hyökkääjä ei ainakaan tätä kautta voi arvailla käyttäjänimiä.

### Pisteet(2pt)

1pt vian löytämisestä
1pt vian korjaamisesta
0pt vikatyypin eliminoimisesta


## Ongelma 7 

Tyyppi:   xss-injektio
Sijainti: checkerloop
Kuvaus: Voidaan lisätä .txt-päätteisiä tiedostoja

Voidaan lisätä esim. katti.jpg%00.txt, mutta onko ongelma kun on oikeasti jpg?

### Esimerkkihyökkäys: 

1) 
2) 
3) 
4)

### Korjaus:

### Pisteet(1pt)

1pt vian löytämisestä
0pt vian korjaamisesta
0pt vikatyypin eliminoimisesta


## Ongelma 8 // Korjaus tehty.

Tyyppi:   cookie poisoning
Sijainti: login()
Kuvaus: Jos tiedetään joku muu käyttäjä, niin voidaan kirjautua ilman salasanaa hänen tilille.

Jos on tiedossa toisen käyttäjän pelkkä käyttäjätunnus, joka on jollain tapaa saatu selville. Esimerkiksi logout -tapahtuman jälkeen, kun tulostuu nimi ruudulle (TODO: lisää tästä ongelma!), niin joku voi nähdä sen ihan vain vilkaisemalla näyttöä. Sen jälkeen manipuloimalla pelkästään webselaimella cookieta voidaan kirjautua sisään palveluun. Sekä lisäksi nähdä kaikki kyseisen käyttäjän tiedot ja tehdä niillä mitä lystää.

### Esimerkkihyökkäys: 

1) Käyttäjänimi on saatu selville jotenkin.
2) Hyökkääjä avaa inspect -työkalun ja alkaa kirjoittamaan snippets -kohtaan scriptiä/snippettiä. 
3) Hyökkääjän koodi:
   newCookie = "null";
   newCookie = "username=lion"; <- tai joku selville saatu username
   document.cookie = newCookie;
4) Hyökkääjä ajaa koodin: "run snippet"
5) Hyökkääjä lataa sivun uudestaan ja pääsee käsiksi toisen käyttäjän tiliin ja tiedostoihin.

### Korjaus:

Commit: <korjattu ongelma 8>

Korjattiin muuttamalla resp.set_cookie('username', username) tälläiseksi:
resp.set_cookie("username", value = username, httponly = True). 

Korjaus toimii, koska  httponly:a käyttämällä vähennetään riskiä, että hyökkääjä pääsisi käsiksi evästeisiin.

### Pisteet(2pt)

1pt vian löytämisestä
1pt vian korjaamisesta
0pt vikatyypin eliminoimisesta


## Ongelma 9 

Tyyppi:  nimen näkyminen tarpeettomasti
Sijainti: melkein joka puolella
Kuvaus: Altistaa muille hyökkäyksille, kun käyttäjänimi on näkyvillä

Tarviiko tätä edes enempää selostaa. Ks. ongelma 8, siellä on selitetty käyttäjänimen näkymisen tuottamista ongelmista.

### Esimerkkihyökkäys: 

1) Käyttäjänimi on saatu selville jotenkin.
2) Hyökkääjä voi käyttää sitä monella tapaa väärin tai hajottaa koko palvelun.

### Korjaus:

Commit: <>

### Pisteet(1pt)

1pt vian löytämisestä
0pt vian korjaamisesta
0pt vikatyypin eliminoimisesta


## Ongelma 10 // Korjattu

Tyyppi: Tietoturvaongelma
Sijainti: serve_file()

Kuvaus: 
Nähdään muiden hylättyjen tiedostojen nimet sekä niitä lisätä yrittäneen käyttäjän
käyttäjänimi. Siinä vaiheessa käyttäjä ei ole jakanut tiedostojaan vielä muille vaan
vasta yrittänyt ladata sitä palveluun. Jos nimi on esim. jotenkin
arkaluontoinen?

Lisäksi, vaikka tiedostojen nimet on jo tehty vaarattomiksi(ongelma 3), merkkejä muuttamalla
mahdollisesti vaaralliseksi muuttuvien merkkijonojen tulostaminen sivulle kaikille 
käyttäjille näkyviksi on riskialtista.

### Esimerkkihyökkäys: 

1) Hyökkääjä lataa palveluun tiedoston, jonka nimenä on esimerkiksi ykköstehtävässäkin käytetty 
   /delete_file?file=../sue/*
2) Tiedosto hylätään
3) Sue huomaa hylättyjen tiedostojen joukossa tiedoston, jonka polussa näytettää
  olevan hänen käyttäjänimensä
4) Uteliaana ja tietämättömänä Sue kopioi hylätyn tiedostonnimen, 
   liittää sen osoitteeseen ja korvaa alaviivat /-merkeillä
5) Suen kaikki tiedostot poistuu :(

### Esimerkkihyökkäys 2: 

1) Sam lataa palveluun vahingossa tiedoston, esim. videon, jonka on nimennyt
   jollakin sellaisella tavalla, mitä ei haluaisi kaiken kansan nähtäville. 
   Siitä mitä nimi on, voi käyttää omaa mielikuvitusta
2) Tiedosto hylätään, koska se ei ole kuva
3) Kaikki näkevät samin lataaman, mutta hylätyn tiedoston sam/"tiedosto" muodossa :(
4) Samiä vähintäänkin hävettää

### Korjaus:

Korjasin tämän niin, että muutin bad_file_log:n rakenteen set:stä list:ksi, johon voidaan laittaa sekä
tiedoston ladannut käyttäjä että ladatun tiedoston nimi. Ennen tulostamista otetaan bad_file_log:sta 
vain kirjautuneen käyttäjän tiedostot ja tulostetaan vain ne.

Korjaus toimii koska nyt käyttäjälle ei näytetä muita kuin hänen lataamiaan hylättyjä tiesotonnimiä.

Commit: <Ongelma 10 korjattu>

### Pisteet(2pt)

1pt vian löytämisestä
1pt vian korjaamisesta
0pt vikatyypin eliminoimisesta


## Ongelma 11 

Tyyppi:   poistaa kaikki tiedostot kerralla
Sijainti: delete_file()
Kuvaus: Hyökkääjä voi laittaa urlin perään '*' -merkin ja poistaa kaikki tiedostot käyttäjältä

Esimerkki url : http://localhost:5000/user_content?file=*
Yllä mainittu url siis poistaa kaikki tiedostot tietyltä käyttäjältä.
Hyökkääjä voi muun muassa tehdä näin jos toteuttaa ongelmaa 8.

### Esimerkkihyökkäys: 

1) Käyttäjänimi on saatu selville jotenkin.
2) Hyökkääjä voi käyttää sitä monella tapaa väärin tai hajottaa koko palvelun.
3) Hyökkääjä on päässyt kirjautumaan jonkun tilille.
4) Hyökkääjä syöttää url -kenttään: http://localhost:5000/user_content?file=*
5) Tiedostot deletoituvat kaikki kyseessä olevan käyttäjän tililtä.

### Korjaus:

Commit: <>

### Pisteet(1pt)

1pt vian löytämisestä
0pt vian korjaamisesta
0pt vikatyypin eliminoimisesta